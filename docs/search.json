[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 riddle authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/package-functions.html","id":"ridl","dir":"Articles","previous_headings":"","what":"ridl","title":"Package Functions","text":"","code":"# ridl(action =\"package_search\", as.list(\"cbi\"))"},{"path":"/articles/package-functions.html","id":"container_show","dir":"Articles","previous_headings":"","what":"container_show","title":"Package Functions","text":"","code":"# americasdataset <- container_show( id = \"americas-regional-dataset\")"},{"path":"/articles/package-functions.html","id":"container_list","dir":"Articles","previous_headings":"","what":"container_list","title":"Package Functions","text":"","code":"# catalog <- container_list() # groups_name <- catalog |> #                   dplyr::select(groups_name) |> #                   dplyr::distinct()"},{"path":"/articles/package-functions.html","id":"find_child_containers","dir":"Articles","previous_headings":"","what":"find_child_containers","title":"Package Functions","text":"","code":"#catalog <- container_list() # containerAmericas <- find_child_containers(parent = \"americas\", #                                            catalog = catalog)"},{"path":"/articles/package-functions.html","id":"dataset_metadata","dir":"Articles","previous_headings":"","what":"dataset_metadata","title":"Package Functions","text":"","code":"m <- dataset_metadata(title = \"Motor Trend Car Road Tests\",                       name = \"mtcars\",                       notes = \"The data was extracted from the 1974 Motor Trend                        US magazine, and comprises fuel consumption and 10 aspects                       of automobile design and performance for 32 automobiles                        (1973–74 models).\",                       owner_org = \"americas\",                       visibility = \"public\",                       geographies = \"UNSPECIFIED\",                       external_access_level = \"open_access\",                       data_collector = \"Motor Trend\",                       keywords = keywords[c(\"Environment\", \"Other\")],                       unit_of_measurement = \"car\",                       data_collection_technique = \"oth\",                       archived = \"False\")  m #> $title #> [1] \"Motor Trend Car Road Tests\" #>  #> $name #> [1] \"mtcars\" #>  #> $notes #> [1] \"The data was extracted from the 1974 Motor Trend \\n                      US magazine, and comprises fuel consumption and 10 aspects\\n                      of automobile design and performance for 32 automobiles \\n                      (1973–74 models).\" #>  #> $owner_org #> [1] \"americas\" #>  #> $visibility #> [1] \"public\" #>  #> $external_access_level #> [1] \"open_access\" #>  #> $data_collector #> [1] \"Motor Trend\" #>  #> $keywords #> Environment       Other  #>        \"11\"        \"54\"  #>  #> $unit_of_measurement #> [1] \"car\" #>  #> $geographies #> [1] \"UNSPECIFIED\" #>  #> $data_collection_technique #> [1] \"oth\" #>  #> $archived #> [1] \"False\""},{"path":"/articles/package-functions.html","id":"dataset_tibblify","dir":"Articles","previous_headings":"","what":"dataset_tibblify","title":"Package Functions","text":"","code":"m <- dataset_metadata(title = \"Motor Trend Car Road Tests\",                       name = \"mtcars\",                       notes = \"The data was extracted from the 1974 Motor Trend                        US magazine, and comprises fuel consumption and 10 aspects                       of automobile design and performance for 32 automobiles                        (1973–74 models).\",                       owner_org = \"americas\",  ## becarefull- all lower case!!!                       visibility = \"public\",                       geographies = \"UNSPECIFIED\",                       external_access_level = \"open_access\",                       data_collector = \"Motor Trend\",                       keywords = keywords[c(\"Environment\", \"Other\")],                       unit_of_measurement = \"car\",                       data_collection_technique = \"oth\",                       archived = \"False\")  m1 <- dataset_tibblify(m) m1 #> # A tibble: 1 × 12 #>   title    name  notes owner_org visibility external_access_level data_collector #>   <chr>    <chr> <chr> <chr>     <chr>      <chr>                 <chr>          #> 1 Motor T… mtca… \"The… americas  public     open_access           Motor Trend    #> # ℹ 5 more variables: keywords <list>, unit_of_measurement <chr>, #> #   geographies <chr>, data_collection_technique <chr>, archived <chr>"},{"path":"/articles/package-functions.html","id":"dataset","dir":"Articles","previous_headings":"","what":"dataset","title":"Package Functions","text":"","code":"#----- # test search in prod Sys.unsetenv(\"USE_UAT\") # riddle::dataset_show(id = \"unhcr-cbi-americas-quarterly-report\") #  # p <- riddle::dataset_show('rms_v4') # list_of_ressources <- p[[\"resources\"]][[1]] # list_of_ressources    #----- # Test create in UAT Sys.setenv(USE_UAT=1) m <- riddle::dataset_metadata(title = \"Testing Riddle Interface\",                       name = \"riddleapitest\",                       notes = \"Making an API test\",                       owner_org = \"americas\",  ## be careful- all lower case!!!                       visibility = \"public\",                       geographies = \"UNSPECIFIED\",                       external_access_level = \"open_access\",                       data_collector = \"Motor Trend\",                       keywords = keywords[c(\"Environment\", \"Other\")],                       unit_of_measurement = \"car\",                       data_collection_technique = \"oth\",                       archived = \"False\") # ## For the above to work - you need to make sure you have at least editor access # to the corresponding container - i.e. owner_org = \"exercise-container\" # p <- dataset_create(metadata = m)  # The return value is a representation of the dataset we just created in # RIDL that you could inspect like any other R object. # p ## Now deleting this! # dataset_delete(id = p$id)  #----- # Test create in prod Sys.unsetenv(\"USE_UAT\") # m1 <- riddle::dataset_metadata(title = \"Test\", #                       name = \"Test\", #                       notes = \"The data was extracted from kobo.\", #                       owner_org = \"americas-regional-dataset\", #                       visibility = \"public\", #                       geographies = \"UNSPECIFIED\", #                       external_access_level = \"open_access\", #                       data_collector = \"UNHCR\", #                       keywords = keywords[c(\"Environment\", \"Other\")], #                       unit_of_measurement = \"car\", #                       data_collection_technique = \"oth\", #                       archived = \"False\") # p <- riddle::dataset_create(metadata = m1)"},{"path":"/articles/package-functions.html","id":"dataset_search","dir":"Articles","previous_headings":"","what":"dataset_search","title":"Package Functions","text":"","code":"#----- # Test search in prod # Sys.unsetenv(\"USE_UAT\") # searching <- \"cbi\" # p <- dataset_search(q = searching, rows = 30) # p    #----- # Test create in UAT Sys.setenv(USE_UAT=1) # p2 <- dataset_search(q = \"testedouard2\")"},{"path":"/articles/package-functions.html","id":"resource_metadata","dir":"Articles","previous_headings":"","what":"resource_metadata","title":"Package Functions","text":"","code":"#resource_metadata() m <- riddle::resource_metadata(type = \"data\",                        url = \"mtcars.csv\",                        name = \"mtcars.csv\",                        format = \"csv\",                        file_type = \"microdata\",                        date_range_start = \"1973-01-01\",                        date_range_end = \"1973-12-31\",                        version = \"1\",                        visibility = \"public\",                        process_status = \"raw\",                        identifiability = \"anonymized_public\") m #> $type #> [1] \"data\" #>  #> $url #> [1] \"mtcars.csv\" #>  #> $name #> [1] \"mtcars.csv\" #>  #> $format #> [1] \"csv\" #>  #> $file_type #> [1] \"microdata\" #>  #> $date_range_start #> [1] \"1973-01-01\" #>  #> $date_range_end #> [1] \"1973-12-31\" #>  #> $visibility #> [1] \"public\" #>  #> $version #> [1] \"1\" #>  #> $process_status #> [1] \"raw\" #>  #> $identifiability #> [1] \"anonymized_public\""},{"path":"/articles/package-functions.html","id":"resource_tibblify","dir":"Articles","previous_headings":"","what":"resource_tibblify","title":"Package Functions","text":"","code":"m <- riddle::resource_metadata(type = \"data\",                        url = \"mtcars.csv\",  # upload = httr::upload_file(system.file(\"extdata/mtcars.csv\", package = \"readr\")),                        name = \"mtcars.csv\",                        format = \"csv\",                        file_type = \"microdata\",                        date_range_start = \"1973-01-01\",                        date_range_end = \"1973-12-31\",                        version = \"1\",                        visibility = \"public\",                        process_status = \"raw\",                        identifiability = \"anonymized_public\")  m1 <- riddle::resource_tibblify(m)    m1 #> # A tibble: 1 × 11 #>   type  url    name  format file_type date_range_start date_range_end visibility #>   <chr> <chr>  <chr> <chr>  <chr>     <chr>            <chr>          <chr>      #> 1 data  mtcar… mtca… csv    microdata 1973-01-01       1973-12-31     public     #> # ℹ 3 more variables: version <chr>, process_status <chr>, #> #   identifiability <chr>"},{"path":"/articles/package-functions.html","id":"resource","dir":"Articles","previous_headings":"","what":"resource","title":"Package Functions","text":"","code":"# ## Full example available with the fetch function.. #----- # ## Test search in prod # Sys.unsetenv(\"USE_UAT\") # p <-  dataset_search(\"rms_v4\") # p # list_of_resources <- p[[\"resources\"]][[1]] # knitr::kable(list_of_resources)  #----- # ## Test search in uat # Sys.setenv(USE_UAT=1) # p <-  dataset_search(\"tests\") # p # ##take the first one # ridlid <- as.character(p[9, c(\"id\")])  #----- # ## Test resource in UAT # Sys.setenv(USE_UAT=1) # m <- riddle::dataset_metadata(title = \"Testing Riddle Interface\", #                       name = \"riddleapitest\", #                       notes = \"Making an API test\", #                       owner_org = \"americas\",  ## be careful- all lower case!!! #                       visibility = \"public\", #                       geographies = \"UNSPECIFIED\", #                       external_access_level = \"open_access\", #                       data_collector = \"myself\", #                       keywords = keywords[c(\"Environment\", \"Other\")], #                       unit_of_measurement = \"byte\", #                       data_collection_technique = \"oth\", #                       archived = \"False\") # ## For the above to work - you need to make sure you have at least editor access # ## to the corresponding container - i.e. owner_org = \"exercise-container\" # p <- dataset_create(metadata = m) # p <-  dataset_show('riddleapitest') # ## Now testing adding the file \"resource.R\" as an attachment # new_attachment <- riddle::resource_metadata(type = \"attachment\", #                        url = \"resourceR\",  #  upload = httr::upload_file(here::here(\"R\",\"resource.R\") ), #                         name = \"Rscript\", #                        format = \"R\", #                        file_type = \"report\", #                        version = \"1\", #                        visibility = \"public\" )   # r <- resource_create(package_id = p$id,  res_metadata = new_attachment ) # resource_create(package_id = p$name,  res_metadata = new_attachment ) # ## Like before, the return value is a tibble representation of the resource. # r  # ## Another example with a data ressource # m <- riddle::resource_metadata(type = \"data\", #                        url = \"mtcars.csv\", #   upload = httr::upload_file(system.file(\"extdata/mtcars.csv\", package = \"readr\")),          #                        name = \"mtcars.csv\", #                        format = \"csv\", #                        file_type = \"microdata\", #                        date_range_start = \"1973-01-01\", #                        date_range_end = \"1973-12-31\", #                        version = \"1\", #                        visibility = \"public\", #                        process_status = \"raw\", #                        identifiability = \"anonymized_public\") # r <- resource_create(package_id = p$id,  #                          res_metadata = m ) # ## let's get again the details of the dataset we want to add the resource in.. # r    # ## and now can search for it - checking it is correctly there...  #  resource_search(\"name:mtcarsriddle\")  # ## And once we’re done experimenting with the API, we should take down our # ## toy dataset since we don’t really need it on RIDL. # dataset_delete(p$id)  # The return value is a representation of the dataset we just created in # RIDL that you could inspect like any other R object. # p ## Now deleting this! # dataset_delete(id = p$id)"},{"path":"/articles/package-functions.html","id":"resource_fetch","dir":"Articles","previous_headings":"","what":"resource_fetch","title":"Package Functions","text":"","code":"## Example 1: with a direct URL #----- # Test search in prod # Sys.unsetenv(\"USE_UAT\")   # resource_fetch(url = 'https://ridl.unhcr.org/dataset/a60f4b79-8acc-4893-8fb9-d52f94416b19/resource/daa2b9e4-bf97-4302-86a5-08bb62a5a937/download/df_age_2022.csv', # path = tempfile())   ## Example 2: Let's try to identify a resource - then fetch it locally and update it back... as from here # https://github.com/unhcr-americas/darien_gap_human_mobility/blob/main/report.Rmd#L38 # Sys.unsetenv(\"USE_UAT\") # ## Get the dataset metadata based on its canonical name # p <- riddle::dataset_show('rms_v4') # ## Let's get the fifth resource within this dataset # test_ressources <- p[[\"resources\"]][[1]] |> dplyr::slice(5) # # ## Download the resource locally in a file name file.. # resource_fetch(url = test_ressources$url,   path =  here::here(\"file\")) # test_ressources$url # # Rebuild the metadata # m <- resource_metadata(type = test_ressources$type, #\"data\", #                          url = \"df_gender_2020.csv\", # upload = httr::upload_file(here::here(\"file\")),  #                          name = test_ressources$name,  # \"Irregular entries by gender in 2022\", #                          format = test_ressources$format, #\"csv\", #                          file_type =  test_ressources$file_type, #\"microdata\", #                          visibility = test_ressources$visibility, # \"public\", #                          date_range_start =  test_ressources$date_range_start, # \"2022-01-01\", #                          date_range_end = test_ressources$date_range_end, #as.character(floor_date(today('America/Panama'), \"month\") - days(1)),  #end day of last month #                          version = test_ressources$version, # \"0\", #                          process_status = test_ressources$process_status,  #\"anonymized\", #                          identifiability = test_ressources$identifiability, #\"anonymized_public\" #   )   #r <- resource_update(id = test_ressources$id,  res_metadata = m)"},{"path":"/articles/package-functions.html","id":"riddle_notebook","dir":"Articles","previous_headings":"","what":"riddle_notebook","title":"Package Functions","text":"","code":"## Time to archive your work once done!! # used in the  RIDL_Notebook markdown template in the package # if( params$publish == \"yes\"){ #   namethisfile = basename(rstudioapi::getSourceEditorContext()$path )   #   riddle_notebook(ridl = params$ridl, #             datafolder = params$datafolder,  #             namethisfile =  namethisfile , #             visibility =  params$visibility ) }"},{"path":"/articles/package-functions.html","id":"summary_report","dir":"Articles","previous_headings":"","what":"summary_report","title":"Package Functions","text":"","code":"# summary_report(year = 2022, #                                    region = \"Americas\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edouard Legoupil. Author, maintainer. Matheus Soldi Hardt. Author. Hisham Galal. Author. UNHCR. Copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Legoupil E, Soldi Hardt M, Galal H (2024). riddle: API wrapper interact UNHCR RIDL Platform. R package version 0.0.5, https://edouard-legoupil.github.io/riddle/.","code":"@Manual{,   title = {riddle: An API wrapper to interact with the UNHCR RIDL Platform},   author = {Edouard Legoupil and Matheus {Soldi Hardt} and Hisham Galal},   year = {2024},   note = {R package version 0.0.5},   url = {https://edouard-legoupil.github.io/riddle/}, }"},{"path":"/index.html","id":"riddle","dir":"","previous_headings":"","what":"An API wrapper to interact with the UNHCR RIDL Platform","title":"An API wrapper to interact with the UNHCR RIDL Platform","text":"minimal package programatically interacting UNHCR Raw Internal Data Library (RIDL). main purpose served package make RIDL API documentation readily accessible within R ecosystem better automation.","code":""},{"path":"/index.html","id":"install-and-configure-authentication-token","dir":"","previous_headings":"","what":"Install and configure authentication token","title":"An API wrapper to interact with the UNHCR RIDL Platform","text":"riddle package requires add API token store use. easiest way store API token .Renviron file automatically read R startup. can retrieve API TOKEN user page. use package, ’ll need store RIDL API token RIDL_API_TOKEN environment variable. easiest way calling usethis::edit_r_environ() adding line RIDL_API_TOKEN=xxxxx file saving restarting R session. package works production UAT instances RIDL (aka “User Acceptance Testing”). use UAT version, add corresponding TOKEN within .Renviron file: RIDL_UAT_API_TOKEN=xxxxx. use UAT version, run Sys.setenv(USE_UAT=1) calling functions package. go back production instance, call Sys.unsetenv(\"USE_UAT\").","code":"install.packages(\"pak\") pak::pkg_install(\"edouard-legoupil/riddle\")"},{"path":"/index.html","id":"a-quick-intro-to-ridl-concepts","dir":"","previous_headings":"","what":"A quick intro to RIDL concepts","title":"An API wrapper to interact with the UNHCR RIDL Platform","text":"order easily use ridlle package, ’s important understand 3 main concepts platform. RIDL based CKAN documentation available details.","code":""},{"path":"/index.html","id":"container","dir":"","previous_headings":"A quick intro to RIDL concepts","what":"Container","title":"An API wrapper to interact with the UNHCR RIDL Platform","text":"container placeholder can share data RIDL. container can hold zero multiple datasets. convention operations datasets grouped together within container operation container can also include multiple specific containers. Container documented within dataset metadata variable owner_org Container URL typically formatted : https://ridl.unhcr.org/data-container/`__name_of_country__`","code":""},{"path":"/index.html","id":"dataset","dir":"","previous_headings":"A quick intro to RIDL concepts","what":"Dataset","title":"An API wrapper to interact with the UNHCR RIDL Platform","text":"dataset placeholder can share series data documentation files (called resources - see ), eac linked data project. dataset described metadata (using data documentation initiative (DDI) format) gives enough context project information properly store data files use . Dataset URL typically formatted : https://ridl.unhcr.org/dataset/`__name_of_dataset__` Data files, e.g Excel file, well supporting documentation called resource shared either data attachment within specific dataset page.","code":""},{"path":"/index.html","id":"resource","dir":"","previous_headings":"A quick intro to RIDL concepts","what":"Resource","title":"An API wrapper to interact with the UNHCR RIDL Platform","text":"resource file shared dataset page. Depending type ( data attachment ) , comes specific minimum metadata complement metata project . Resources URL typically formatted : https://ridl.unhcr.org/dataset/`__name_of_dataset__`/resource/`__id_of_the_resource__`","code":""},{"path":"/index.html","id":"how-to","dir":"","previous_headings":"","what":"How To","title":"An API wrapper to interact with the UNHCR RIDL Platform","text":"UNHCR staff, access series containers based working. Within container, editor admin right, can create dataset.","code":""},{"path":"/index.html","id":"use-case-1-create-a-new-dataset","dir":"","previous_headings":"How To","what":"Use case 1: create a new dataset","title":"An API wrapper to interact with the UNHCR RIDL Platform","text":"create dataset, need first document dataset metadata, including reference container like new dataset created. dataset created, can add many resources required (either data attachment).","code":"library(riddle)  ## let use UAT   Sys.setenv(USE_UAT=1)  ## First we create the dataset metadata  m <- dataset_metadata(title = \"Motor Trend Car Road Tests\",                       name = \"testing-riddle\",                       notes = \"The data was extracted from the 1974 Motor Trend                        US magazine, and comprises fuel consumption and 10 aspects                       of automobile design and performance for 32 automobiles                        (1973–74 models).\",                       owner_org = \"americas\", ## becarefull this is the                                               ##canonincal name of the container                       visibility = \"public\",                       external_access_level = \"open_access\",                       data_collector = \"Motor Trend\",                       keywords = keywords[c(\"Environment\", \"Other\")],                       unit_of_measurement = \"car\",                       data_collection_technique = \"oth\",                       archived = \"False\")                                               ## For the above to work - you need to make sure you have at least editor access  # to the corresponding container - i.e. owner_org = \"americas\"  p <- dataset_create(m)  # The return value is a representation of the dataset we just created in  # RIDL that you could inspect like any other R object.  p"},{"path":"/index.html","id":"use-case-2-replace-data-file-within-dataset","dir":"","previous_headings":"How To","what":"Use case 2: replace data file within dataset","title":"An API wrapper to interact with the UNHCR RIDL Platform","text":"Ideally, data resources kobotoolbox added using API connection described Part 4 documentation. Though, might specific cases building operational dataset, scrapping official data source web within PDF want add regular basis new data resource within existing dataset. can check practical example use case :darien_gap_human_mobility simple example using mtcars dataset example.","code":"library(riddle) ## let's get again the details of the dataset we want to add the resource in  # based on a search... p <- dataset_search(\"testing-riddle\")  ## and now can search for it - checking it is correctly there...  resource_search(\"name:mtcars\")  m <- resource_metadata(type = \"data\",                        url = \"mtcars.csv\",                        name = \"mtcars.csv\",                        format = \"csv\",                        file_type = \"microdata\",                        date_range_start = \"1973-01-01\",                        date_range_end = \"1973-12-31\",                        version = \"1\",                        visibility = \"public\",                        process_status = \"raw\",                        identifiability = \"anonymized_public\") ## let's get again the details of the dataset we want to add the resource in.. r <- resource_update(p$id, m, uat = TRUE)  # Like before, the return value is a tibble representation of the # resource. r"},{"path":"/index.html","id":"use-case-3-add-a-new-attachment-with-your-reproducible-analysis-code","dir":"","previous_headings":"How To","what":"Use case 3: Add a new attachment with your reproducible analysis code","title":"An API wrapper to interact with the UNHCR RIDL Platform","text":"want add initial data exploration, data interpretation presentation /data story telling report new attachement resource within dataset. can check practical example use case :kobocruncher","code":"library(riddle)  # And once we’re done experimenting with the API, we should take down our # toy dataset since we don’t really need it on RIDL. dataset_delete(p$id)"},{"path":"/index.html","id":"use-case-4-data-landscape-report","dir":"","previous_headings":"How To","what":"Use case 4: Data Landscape Report","title":"An API wrapper to interact with the UNHCR RIDL Platform","text":"package includes parameterized notebook template (parameter including region year) assess data landscape. Based metadata, reports looks type data available per country provide ways perform data gap analysis many dataset per country? Data set collected household level Data set collected Community level Data Access type Data time Data Collection Mode Data Topic Data linked Kobo RIDL Sampling type","code":""},{"path":"/pull_request_template.html","id":"issues-to-validate-to-close-","dir":"","previous_headings":"","what":"Issues to validate to close :","title":"NA","text":"issue #","code":""},{"path":"/pull_request_template.html","id":"processed-issues-to-keep-open-or-in-progress","dir":"","previous_headings":"","what":"Processed issues to keep open or in progress:","title":"NA","text":"issue #","code":""},{"path":"/pull_request_template.html","id":"checklist","dir":"","previous_headings":"","what":"Checklist:","title":"NA","text":"package check go local? CI pass? added / fixed features documented, tested? added features / solved problems briefly presented PR message? changes related tickets / issues listed commits PR ? tickets “review” mode Project Tracking Board? ticket, closed acceptance PR, contain comment tells validate ?","code":""},{"path":"/reference/container_list.html","id":null,"dir":"Reference","previous_headings":"","what":"container_list — container_list","title":"container_list — container_list","text":"Provide list child containers specific container","code":""},{"path":"/reference/container_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"container_list — container_list","text":"","code":"container_list(parent)"},{"path":"/reference/container_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"container_list — container_list","text":"parent name container","code":""},{"path":"/reference/container_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"container_list — container_list","text":"catalog containers","code":""},{"path":"/reference/container_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"container_list — container_list","text":"function used generate regional dashbaord.. carefull - expansive functions needs parse entire content server.... uses https://docs.ckan.org/en/2.9/api/index.html#ckan.logic.action.get.organization_list","code":""},{"path":"/reference/container_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"container_list — container_list","text":"","code":"# catalog <- container_list() # groups_name <- catalog |> #                   dplyr::select(groups_name) |> #                   dplyr::distinct()"},{"path":"/reference/container_show.html","id":null,"dir":"Reference","previous_headings":"","what":"container_show — container_show","title":"container_show — container_show","text":"Get overview accessible infos containers RIDL Use https://docs.ckan.org/en/2.9/api/index.html#ckan.logic.action.get.organization_show","code":""},{"path":"/reference/container_show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"container_show — container_show","text":"","code":"container_show(id)"},{"path":"/reference/container_show.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"container_show — container_show","text":"id id name container","code":""},{"path":"/reference/container_show.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"container_show — container_show","text":"dataframe container metadata","code":""},{"path":"/reference/container_show.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"container_show — container_show","text":"","code":"# americasdataset <- container_show( id = \"americas-regional-dataset\")"},{"path":"/reference/dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Work with RIDL datasets (datasets) — dataset","title":"Work with RIDL datasets (datasets) — dataset","text":"Work RIDL datasets (datasets)","code":""},{"path":"/reference/dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Work with RIDL datasets (datasets) — dataset","text":"","code":"dataset_create(metadata)  dataset_show(id)  dataset_update(id, metadata)  dataset_patch(id, metadata)  dataset_delete(id)"},{"path":"/reference/dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Work with RIDL datasets (datasets) — dataset","text":"metadata Metadata created dataset_metadata(). id id name dataset.","code":""},{"path":"/reference/dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Work with RIDL datasets (datasets) — dataset","text":"dataset.","code":""},{"path":"/reference/dataset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Work with RIDL datasets (datasets) — dataset","text":"must necessary permissions create, edit, delete datasets. Note several fields required dataset_create() dataset_update() operations succeed. Consult dataset_metadata() details. dataset_update()/dataset_patch() operations, recommended call dataset_show(), make desired changes result, call dataset_update()/dataset_patch() . difference update patch methods patch perform update provided parameters, leaving parameters unchanged, whereas update methods deletes parameters explicitly provided metadata.","code":""},{"path":"/reference/dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Work with RIDL datasets (datasets) — dataset","text":"","code":"#----- # test search in prod Sys.unsetenv(\"USE_UAT\") # riddle::dataset_show(id = \"unhcr-cbi-americas-quarterly-report\") #  # p <- riddle::dataset_show('rms_v4') # list_of_ressources <- p[[\"resources\"]][[1]] # list_of_ressources    #----- # Test create in UAT Sys.setenv(USE_UAT=1) m <- riddle::dataset_metadata(title = \"Testing Riddle Interface\",                       name = \"riddleapitest\",                       notes = \"Making an API test\",                       owner_org = \"americas\",  ## be careful- all lower case!!!                       visibility = \"public\",                       geographies = \"UNSPECIFIED\",                       external_access_level = \"open_access\",                       data_collector = \"Motor Trend\",                       keywords = keywords[c(\"Environment\", \"Other\")],                       unit_of_measurement = \"car\",                       data_collection_technique = \"oth\",                       archived = \"False\") # ## For the above to work - you need to make sure you have at least editor access # to the corresponding container - i.e. owner_org = \"exercise-container\" # p <- dataset_create(metadata = m)  # The return value is a representation of the dataset we just created in # RIDL that you could inspect like any other R object. # p ## Now deleting this! # dataset_delete(id = p$id)  #----- # Test create in prod Sys.unsetenv(\"USE_UAT\") # m1 <- riddle::dataset_metadata(title = \"Test\", #                       name = \"Test\", #                       notes = \"The data was extracted from kobo.\", #                       owner_org = \"americas-regional-dataset\", #                       visibility = \"public\", #                       geographies = \"UNSPECIFIED\", #                       external_access_level = \"open_access\", #                       data_collector = \"UNHCR\", #                       keywords = keywords[c(\"Environment\", \"Other\")], #                       unit_of_measurement = \"car\", #                       data_collection_technique = \"oth\", #                       archived = \"False\") # p <- riddle::dataset_create(metadata = m1)"},{"path":"/reference/dataset_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience function to record dataset metadata — dataset_metadata","title":"Convenience function to record dataset metadata — dataset_metadata","text":"function create metadata object used interact API","code":""},{"path":"/reference/dataset_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience function to record dataset metadata — dataset_metadata","text":"","code":"dataset_metadata(   title = NULL,   name = NULL,   short_title = NULL,   notes = NULL,   tag_string = NULL,   url = NULL,   owner_org = NULL,   geographies = \"UNSPECIFIED\",   private = NULL,   visibility = NULL,   external_access_level = NULL,   data_sensitivity = NULL,   original_id = NULL,   data_collector = NULL,   date_range_start = NULL,   date_range_end = NULL,   keywords = NULL,   unit_of_measurement = NULL,   sampling_procedure = NULL,   operational_purpose_of_data = NULL,   `hxl-ated` = NULL,   process_status = NULL,   identifiability = NULL,   geog_coverage = NULL,   data_collection_technique = NULL,   linked_datasets = NULL,   archived = NULL,   admin_notes = NULL,   sampling_procedure_notes = NULL,   response_rate_notes = NULL,   data_collection_notes = NULL,   weight_notes = NULL,   clean_ops_notes = NULL,   data_accs_notes = NULL,   ddi = NULL,   ... )"},{"path":"/reference/dataset_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience function to record dataset metadata — dataset_metadata","text":"title Title(*) - Make sure include: 'Survey name/title', 'Location', 'Country', 'Year(s)' order indicated. name URL(*) - canonical name dataset, eg. -dataset. short_title Short title - eg. Short title project. notes Description(*) - useful notes data. Please include number observations. tag_string Tags - eg. economy, mental health, government. url Project URL - Website URL associated data project (applicable). owner_org Data container(*) - Use canonical name container (.e. lower case) instance \"americas\" - \"Americas\" - case using right container receive.id container can also used geographies defaults geographies - pulling webservice geoserver private Visibility (Private/Public). visibility Internal Access Level(*). Allowed values: restricted (Private), public (Internally Visible). external_access_level External access level(*). Allowed values: not_available (available), direct_access (Direct access), public_use (Public use), licensed_use (Licensed use), data_enclave (Data enclave), open_access (Open access). data_sensitivity Data sensitivity - Apply Anonymized Personally identifiable data. Allowed values: yes (Yes), (). original_id Original ID - dataset already ID source org, DDI, etc... data_collector Data Collector(*) - organization owns / collected data. Multiple values allowed. date_range_start Date collection first date - Use dd/mm/yyyy format. date_range_end Date collection last date - Use dd/mm/yyyy format. keywords Topic classifications(*) - Tags useful searching datasets. Multiple values allowed. See keywords unit_of_measurement Unit measurement(*) - Unit measurement / observation dataset. sampling_procedure Sampling Procedure. Multiple values allowed. Allowed values: total_universe_complete_enumeration (Total universe/Complete enumeration), probability_simple_random (Probability: Simple random), probability_systematic_random (Probability: Systematic random), probability_stratified (Probability: Stratified), probability_stratified_proportional (Probability: Stratified: Proportional), probability_stratified_disproportional (Probability: Stratified: Disproportional), probability_cluster (Probability: Cluster), probability_cluster_simple_random (Probability: Cluster: Simple random ), probability_cluster_stratified_random (Probability: Cluster: Stratified random), probability_multistage (Probability: Multistage), nonprobability (Non-probability), nonprobability_availability (Non-probability: Availability), nonprobability_purposive (Non-probability: Purposive), nonprobability_quota (Non-probability: Quota), nonprobability_respondentassisted (Non-probability: Respondent-assisted), mixed_probability_nonprobability (Mixed probability non-probability), other_other (Use sampling procedure known, found list..). operational_purpose_of_data Operational purpose data - Classification type data contained file. Multiple values allowed. Allowed values: participatory_assessments (Participatory assessments), baseline_household_survey (Baseline Household Survey), rapid_needs_assessment (Rapid Needs Assessment), protection_monitoring (Protection Monitoring), programme_monitoring (Programme monitoring), population_data (Population Data), cartography (Cartography, Infrastructure & GIS). process_status Dataset Process Status. Allowed values: raw (Raw-Uncleaned), cleaned (Cleaned ), anonymized (Cleaned & Anonymized). identifiability Identifiability. Allowd values: personally_identifiable (Personally identifiable), anonymized_enclave (Anonymized 1st level: Data Enclave - removed direct identifiers), anonymized_scientific (Anonymized 2st level: Scientific Use File (SUF)), anonymized_public (Anonymized 3rd level: Public Use File (PUF)). geog_coverage Geographic Coverage - eg. National coverage, name area, etc. data_collection_technique Data collection technique(*). Allowed values: nf (specified), f2f (Face--face interview), capi (Face--face interview: Computerised), cami (Face--face interview: Mobile), papi (Face--face interview: Paper--pencil), tri (Telephone interview), eri (E-mail interview), wri (Web-based interview: audio-visual technology enabling interviewer(s) interviewee(s) communicate real time), easi (Self-administered questionnaire: E-mail), pasi (Self-administered questionnaire: Paper), sasi (Self-administered questionnaire: SMS/MMS), casi (Self-administered questionnaire: Computer-assisted), cawi (Self-administered questionnaire: Web-based), foc (Face--face focus group), tfoc (Telephone focus group), obs (Observation), oth (). linked_datasets Linked Datasets - Links RIDL datasets. supports multiple selections. archived Archived(*) - Allows users indicate dataset archived active. Allowed values: False (), True (Yes). admin_notes Admin Notes - General. can use Markdown formatting . sampling_procedure_notes Admin Notes - Sampling Procedure. can use Markdown formatting . response_rate_notes Admin Notes - Response Rate. can use Markdown formatting . data_collection_notes Admin Notes - Data Collection. can use Markdown formatting . weight_notes Admin Notes - Weighting. can use Markdown formatting . clean_ops_notes Admin Notes - Cleaning. can use Markdown formatting . data_accs_notes Admin Notes - Access authority. can use Markdown formatting . ddi DDI. ... ignored. `hxl-ated` HXL-ated. Allowed values: False (), True (Yes).","code":""},{"path":"/reference/dataset_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience function to record dataset metadata — dataset_metadata","text":"list provided metadata.","code":""},{"path":"/reference/dataset_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convenience function to record dataset metadata — dataset_metadata","text":"arguments type character. Fields tag_string, data_collector, keywords, sampling_procedure, operational_purpose_of_data accept vectors multiple values. Fields marked (*) required dataset_create() dataset_update() operations.","code":""},{"path":"/reference/dataset_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convenience function to record dataset metadata — dataset_metadata","text":"","code":"m <- dataset_metadata(title = \"Motor Trend Car Road Tests\",                       name = \"mtcars\",                       notes = \"The data was extracted from the 1974 Motor Trend                        US magazine, and comprises fuel consumption and 10 aspects                       of automobile design and performance for 32 automobiles                        (1973–74 models).\",                       owner_org = \"americas\",                       visibility = \"public\",                       geographies = \"UNSPECIFIED\",                       external_access_level = \"open_access\",                       data_collector = \"Motor Trend\",                       keywords = keywords[c(\"Environment\", \"Other\")],                       unit_of_measurement = \"car\",                       data_collection_technique = \"oth\",                       archived = \"False\")  m #> $title #> [1] \"Motor Trend Car Road Tests\" #>  #> $name #> [1] \"mtcars\" #>  #> $notes #> [1] \"The data was extracted from the 1974 Motor Trend \\n                      US magazine, and comprises fuel consumption and 10 aspects\\n                      of automobile design and performance for 32 automobiles \\n                      (1973–74 models).\" #>  #> $owner_org #> [1] \"americas\" #>  #> $visibility #> [1] \"public\" #>  #> $external_access_level #> [1] \"open_access\" #>  #> $data_collector #> [1] \"Motor Trend\" #>  #> $keywords #> Environment       Other  #>        \"11\"        \"54\"  #>  #> $unit_of_measurement #> [1] \"car\" #>  #> $geographies #> [1] \"UNSPECIFIED\" #>  #> $data_collection_technique #> [1] \"oth\" #>  #> $archived #> [1] \"False\" #>"},{"path":"/reference/dataset_tibblify.html","id":null,"dir":"Reference","previous_headings":"","what":"dataset_tibblify — dataset_tibblify","title":"dataset_tibblify — dataset_tibblify","text":"Helper function package API results  tibble","code":""},{"path":"/reference/dataset_tibblify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dataset_tibblify — dataset_tibblify","text":"","code":"dataset_tibblify(x)"},{"path":"/reference/dataset_tibblify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dataset_tibblify — dataset_tibblify","text":"x dataset list","code":""},{"path":"/reference/dataset_tibblify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dataset_tibblify — dataset_tibblify","text":"dataset","code":""},{"path":"/reference/dataset_tibblify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dataset_tibblify — dataset_tibblify","text":"","code":"m <- dataset_metadata(title = \"Motor Trend Car Road Tests\",                       name = \"mtcars\",                       notes = \"The data was extracted from the 1974 Motor Trend                        US magazine, and comprises fuel consumption and 10 aspects                       of automobile design and performance for 32 automobiles                        (1973–74 models).\",                       owner_org = \"americas\",  ## becarefull- all lower case!!!                       visibility = \"public\",                       geographies = \"UNSPECIFIED\",                       external_access_level = \"open_access\",                       data_collector = \"Motor Trend\",                       keywords = keywords[c(\"Environment\", \"Other\")],                       unit_of_measurement = \"car\",                       data_collection_technique = \"oth\",                       archived = \"False\")  m1 <- dataset_tibblify(m) m1 #> # A tibble: 1 × 12 #>   title    name  notes owner_org visibility external_access_level data_collector #>   <chr>    <chr> <chr> <chr>     <chr>      <chr>                 <chr>          #> 1 Motor T… mtca… \"The… americas  public     open_access           Motor Trend    #> # ℹ 5 more variables: keywords <list>, unit_of_measurement <chr>, #> #   geographies <chr>, data_collection_technique <chr>, archived <chr>"},{"path":"/reference/find_child_containers.html","id":null,"dir":"Reference","previous_headings":"","what":"find_child_containers — find_child_containers","title":"find_child_containers — find_child_containers","text":"Provide list child containers - including nested one - specific container","code":""},{"path":"/reference/find_child_containers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"find_child_containers — find_child_containers","text":"","code":"find_child_containers(parent, catalog)"},{"path":"/reference/find_child_containers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"find_child_containers — find_child_containers","text":"parent name parent container catalog daaframe object catalog container produced container_list()","code":""},{"path":"/reference/find_child_containers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"find_child_containers — find_child_containers","text":"vector child container","code":""},{"path":"/reference/find_child_containers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"find_child_containers — find_child_containers","text":"carefull - expansive functions needs parse entire content server....","code":""},{"path":"/reference/find_child_containers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"find_child_containers — find_child_containers","text":"","code":"#catalog <- container_list() # containerAmericas <- find_child_containers(parent = \"americas\", #                                            catalog = catalog)"},{"path":"/reference/keywords.html","id":null,"dir":"Reference","previous_headings":"","what":"dataset keywords — keywords","title":"dataset keywords — keywords","text":"extracted dataset schema.","code":""},{"path":"/reference/keywords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dataset keywords — keywords","text":"","code":"keywords"},{"path":"/reference/keywords.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"dataset keywords — keywords","text":"named character vector mapping user-visible labels (names) corresponding codes system (values).","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/resource.html","id":null,"dir":"Reference","previous_headings":"","what":"Work with RIDL resources (files) — resource","title":"Work with RIDL resources (files) — resource","text":"Work RIDL resources (files)","code":""},{"path":"/reference/resource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Work with RIDL resources (files) — resource","text":"","code":"resource_create(package_id, res_metadata)  resource_update(id, res_metadata)  resource_upload(package_id, res_metadata)  resource_patch(id, res_metadata)  resource_delete(id)"},{"path":"/reference/resource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Work with RIDL resources (files) — resource","text":"package_id id name dataset resource belongs . res_metadata Metadata created resource_metadata(). id id name resource.","code":""},{"path":"/reference/resource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Work with RIDL resources (files) — resource","text":"metadata resource. updated metadata resource. upload metadata resource.","code":""},{"path":"/reference/resource.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Work with RIDL resources (files) — resource","text":"must necessary permissions create, edit, delete datasets resources. Note several fields required resource_update(), resource_create() resource_update() operations succeed. Consult resource_metadata() details. resource_update() check resource exists dataset. resource name exist dataset, resource_update() create new resource. resource name already exists dataset, resource_update() upload resource also increase number version. resource_update()/resource_patch() operations, recommended call resource_show(), make desired changes result, call resource_update()/resource_patch() . difference update patch methods patch perform update provided parameters, leaving parameters unchanged, whereas update methods deletes parameters explicitly provided metadata.","code":""},{"path":"/reference/resource.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Work with RIDL resources (files) — resource","text":"","code":"# ## Full example available with the fetch function.. #----- # ## Test search in prod # Sys.unsetenv(\"USE_UAT\") # p <-  dataset_search(\"rms_v4\") # p # list_of_resources <- p[[\"resources\"]][[1]] # knitr::kable(list_of_resources)  #----- # ## Test search in uat # Sys.setenv(USE_UAT=1) # p <-  dataset_search(\"tests\") # p # ##take the first one # ridlid <- as.character(p[9, c(\"id\")])  #----- # ## Test resource in UAT # Sys.setenv(USE_UAT=1) # m <- riddle::dataset_metadata(title = \"Testing Riddle Interface\", #                       name = \"riddleapitest\", #                       notes = \"Making an API test\", #                       owner_org = \"americas\",  ## be careful- all lower case!!! #                       visibility = \"public\", #                       geographies = \"UNSPECIFIED\", #                       external_access_level = \"open_access\", #                       data_collector = \"myself\", #                       keywords = keywords[c(\"Environment\", \"Other\")], #                       unit_of_measurement = \"byte\", #                       data_collection_technique = \"oth\", #                       archived = \"False\") # ## For the above to work - you need to make sure you have at least editor access # ## to the corresponding container - i.e. owner_org = \"exercise-container\" # p <- dataset_create(metadata = m) # p <-  dataset_show('riddleapitest') # ## Now testing adding the file \"resource.R\" as an attachment # new_attachment <- riddle::resource_metadata(type = \"attachment\", #                        url = \"resourceR\",  #  upload = httr::upload_file(here::here(\"R\",\"resource.R\") ), #                         name = \"Rscript\", #                        format = \"R\", #                        file_type = \"report\", #                        version = \"1\", #                        visibility = \"public\" )   # r <- resource_create(package_id = p$id,  res_metadata = new_attachment ) # resource_create(package_id = p$name,  res_metadata = new_attachment ) # ## Like before, the return value is a tibble representation of the resource. # r  # ## Another example with a data ressource # m <- riddle::resource_metadata(type = \"data\", #                        url = \"mtcars.csv\", #   upload = httr::upload_file(system.file(\"extdata/mtcars.csv\", package = \"readr\")),          #                        name = \"mtcars.csv\", #                        format = \"csv\", #                        file_type = \"microdata\", #                        date_range_start = \"1973-01-01\", #                        date_range_end = \"1973-12-31\", #                        version = \"1\", #                        visibility = \"public\", #                        process_status = \"raw\", #                        identifiability = \"anonymized_public\") # r <- resource_create(package_id = p$id,  #                          res_metadata = m ) # ## let's get again the details of the dataset we want to add the resource in.. # r    # ## and now can search for it - checking it is correctly there...  #  resource_search(\"name:mtcarsriddle\")  # ## And once we’re done experimenting with the API, we should take down our # ## toy dataset since we don’t really need it on RIDL. # dataset_delete(p$id)  # The return value is a representation of the dataset we just created in # RIDL that you could inspect like any other R object. # p ## Now deleting this! # dataset_delete(id = p$id)"},{"path":"/reference/resource_fetch.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch resource from RIDL — resource_fetch","title":"Fetch resource from RIDL — resource_fetch","text":"Fetch resource RIDL","code":""},{"path":"/reference/resource_fetch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch resource from RIDL — resource_fetch","text":"","code":"resource_fetch(url, path = tempfile())"},{"path":"/reference/resource_fetch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch resource from RIDL — resource_fetch","text":"url URL resource fetch path Location store resource","code":""},{"path":"/reference/resource_fetch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch resource from RIDL — resource_fetch","text":"Path downloaded file","code":""},{"path":"/reference/resource_fetch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch resource from RIDL — resource_fetch","text":"","code":"## Example 1: with a direct URL #----- # Test search in prod # Sys.unsetenv(\"USE_UAT\")   # resource_fetch(url = 'https://ridl.unhcr.org/dataset/a60f4b79-8acc-4893-8fb9-d52f94416b19/resource/daa2b9e4-bf97-4302-86a5-08bb62a5a937/download/df_age_2022.csv', # path = tempfile())   ## Example 2: Let's try to identify a resource - then fetch it locally and update it back... as from here # https://github.com/unhcr-americas/darien_gap_human_mobility/blob/main/report.Rmd#L38 # Sys.unsetenv(\"USE_UAT\") # ## Get the dataset metadata based on its canonical name # p <- riddle::dataset_show('rms_v4') # ## Let's get the fifth resource within this dataset # test_ressources <- p[[\"resources\"]][[1]] |> dplyr::slice(5) # # ## Download the resource locally in a file name file.. # resource_fetch(url = test_ressources$url,   path =  here::here(\"file\")) # test_ressources$url # # Rebuild the metadata # m <- resource_metadata(type = test_ressources$type, #\"data\", #                          url = \"df_gender_2020.csv\", # upload = httr::upload_file(here::here(\"file\")),  #                          name = test_ressources$name,  # \"Irregular entries by gender in 2022\", #                          format = test_ressources$format, #\"csv\", #                          file_type =  test_ressources$file_type, #\"microdata\", #                          visibility = test_ressources$visibility, # \"public\", #                          date_range_start =  test_ressources$date_range_start, # \"2022-01-01\", #                          date_range_end = test_ressources$date_range_end, #as.character(floor_date(today('America/Panama'), \"month\") - days(1)),  #end day of last month #                          version = test_ressources$version, # \"0\", #                          process_status = test_ressources$process_status,  #\"anonymized\", #                          identifiability = test_ressources$identifiability, #\"anonymized_public\" #   )   #r <- resource_update(id = test_ressources$id,  res_metadata = m)"},{"path":"/reference/resource_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience function to record resource metadata — resource_metadata","title":"Convenience function to record resource metadata — resource_metadata","text":"functions create resource metadata","code":""},{"path":"/reference/resource_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience function to record resource metadata — resource_metadata","text":"","code":"resource_metadata(   type = NULL,   url = NULL,   name = NULL,   description = NULL,   format = NULL,   file_type = NULL,   date_range_start = NULL,   date_range_end = NULL,   upload = NULL,   visibility = NULL,   version = NULL,   `hxl-ated` = NULL,   process_status = NULL,   identifiability = NULL,   ... )"},{"path":"/reference/resource_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience function to record resource metadata — resource_metadata","text":"type Resource type(*) - kind file want upload. Allowed values: data (Data file), attachment (Additional attachment). url Upload - file name recorded system. name Name - eg. January 2011 Gold Prices. description Description - usefule notes data. format File format - eg. CSV, XML, JSON. file_type File type(*) - Indicates contained file. Allowed values: microdata (Microdata), questionnaire (Questionnaire), report (Report), sampling_methodology (Sampling strategy & methodology Description), infographics (Infographics & Dashboard), script (Script), concept note (Concept Note), (). date_range_start Data collection first date(*) - Use yyyy-mm-dd format. date_range_end Data collection last date(*) - Use yyyy-mm-dd format. upload File upload. Passed using httr::upload_file(). visibility either version Version(*). process_status File process status(*) - Indicates processing stage data. 'Raw' means data cleaned since collection. 'process' means cleaned. 'Final' means dataset final ready use analytical products. Allowed valued: raw (Raw-Uncleaned), cleaned (Cleaned ), anonymized (Cleaned & Anonymized). identifiability Identifiability(*) - Indicates personally identifiable data contained dataset. Allowed values: personally_identifiable (Personally identifiable), anonymized_enclave (Anonymized 1st level: Data Enclave - removed direct identifiers), anonymized_scientific (Anonymized 2st level: Scientific Use File (SUF)), anonymized_public (Anonymized 3st level: Public Use File (PUF)). ... ignored. `hxl-ated` HXL-ated. Allowed values: False (), True (Yes).","code":""},{"path":"/reference/resource_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience function to record resource metadata — resource_metadata","text":"list provided metadata.","code":""},{"path":"/reference/resource_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convenience function to record resource metadata — resource_metadata","text":"arguments type character. Fields marked (*) required resource_create() resource_update() operations.","code":""},{"path":"/reference/resource_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convenience function to record resource metadata — resource_metadata","text":"","code":"#resource_metadata() m <- riddle::resource_metadata(type = \"data\",                        url = \"mtcars.csv\",                        name = \"mtcars.csv\",                        format = \"csv\",                        file_type = \"microdata\",                        date_range_start = \"1973-01-01\",                        date_range_end = \"1973-12-31\",                        version = \"1\",                        visibility = \"public\",                        process_status = \"raw\",                        identifiability = \"anonymized_public\") m #> $type #> [1] \"data\" #>  #> $url #> [1] \"mtcars.csv\" #>  #> $name #> [1] \"mtcars.csv\" #>  #> $format #> [1] \"csv\" #>  #> $file_type #> [1] \"microdata\" #>  #> $date_range_start #> [1] \"1973-01-01\" #>  #> $date_range_end #> [1] \"1973-12-31\" #>  #> $visibility #> [1] \"public\" #>  #> $version #> [1] \"1\" #>  #> $process_status #> [1] \"raw\" #>  #> $identifiability #> [1] \"anonymized_public\" #>"},{"path":"/reference/resource_tibblify.html","id":null,"dir":"Reference","previous_headings":"","what":"resource_tibblify — resource_tibblify","title":"resource_tibblify — resource_tibblify","text":"Helper function package API results  tibble","code":""},{"path":"/reference/resource_tibblify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"resource_tibblify — resource_tibblify","text":"","code":"resource_tibblify(x)"},{"path":"/reference/resource_tibblify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"resource_tibblify — resource_tibblify","text":"x list","code":""},{"path":"/reference/resource_tibblify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"resource_tibblify — resource_tibblify","text":"list tiblified","code":""},{"path":"/reference/resource_tibblify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"resource_tibblify — resource_tibblify","text":"","code":"m <- riddle::resource_metadata(type = \"data\",                        url = \"mtcars.csv\",  # upload = httr::upload_file(system.file(\"extdata/mtcars.csv\", package = \"readr\")),                        name = \"mtcars.csv\",                        format = \"csv\",                        file_type = \"microdata\",                        date_range_start = \"1973-01-01\",                        date_range_end = \"1973-12-31\",                        version = \"1\",                        visibility = \"public\",                        process_status = \"raw\",                        identifiability = \"anonymized_public\")  m1 <- riddle::resource_tibblify(m)    m1 #> # A tibble: 1 × 11 #>   type  url    name  format file_type date_range_start date_range_end visibility #>   <chr> <chr>  <chr> <chr>  <chr>     <chr>            <chr>          <chr>      #> 1 data  mtcar… mtca… csv    microdata 1973-01-01       1973-12-31     public     #> # ℹ 3 more variables: version <chr>, process_status <chr>, #> #   identifiability <chr>"},{"path":"/reference/riddle_notebook.html","id":null,"dir":"Reference","previous_headings":"","what":"riddle_notebook — riddle_notebook","title":"riddle_notebook — riddle_notebook","text":"Archive crunching files RIDL","code":""},{"path":"/reference/riddle_notebook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"riddle_notebook — riddle_notebook","text":"","code":"riddle_notebook(ridl, datafolder, namethisfile, visibility = \"public\")"},{"path":"/reference/riddle_notebook.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"riddle_notebook — riddle_notebook","text":"ridl ridl container resources added datafolder folder data used notebook stored namethisfile files archived based name notebook created. function automatically get name notebook run , using basename(rstudioapi::getSourceEditorContext()$path ) visibility can  \"public\" per default set private obscure reasons..","code":""},{"path":"/reference/riddle_notebook.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"riddle_notebook — riddle_notebook","text":"nothing analysis files added resources","code":""},{"path":"/reference/riddle_notebook.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"riddle_notebook — riddle_notebook","text":"RIDL UNHCR instance CKAN server accessible UNHCR staff https://ridl.unhcr.org . designed keep track document dataset within organisation. conveniently archive generated report save work notebook: working data, want keep track save work place can useful people available peer review quality assessment. function saves within  RIDL container used get data following resources: generated report source notebook function behavior following - Get metadata RIDL dataset check resources uploaded already shared based name already update, create function relies   # install.packages(\"pak\") # pak::pkg_install(\"edouard-legoupil/riddle\")","code":""},{"path":"/reference/riddle_notebook.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"riddle_notebook — riddle_notebook","text":"","code":"## Time to archive your work once done!! # used in the  RIDL_Notebook markdown template in the package # if( params$publish == \"yes\"){ #   namethisfile = basename(rstudioapi::getSourceEditorContext()$path )   #   riddle_notebook(ridl = params$ridl, #             datafolder = params$datafolder,  #             namethisfile =  namethisfile , #             visibility =  params$visibility ) }"},{"path":"/reference/ridl.html","id":null,"dir":"Reference","previous_headings":"","what":"apihelper — ridl","title":"apihelper — ridl","text":"Helper function make API calls. Calls includes 10 following actions:","code":""},{"path":"/reference/ridl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"apihelper — ridl","text":"","code":"ridl(action, ..., .encoding = \"json\", verbose = FALSE)"},{"path":"/reference/ridl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"apihelper — ridl","text":"action Operation execute. See CKAN's API documentation details. ... whatever needed .encoding HTTP POST encoding use - one json, form, multipart. verbose TRUE FALSE display info console API call","code":""},{"path":"/reference/ridl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"apihelper — ridl","text":"httr::response object result call.","code":""},{"path":"/reference/ridl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"apihelper — ridl","text":"dataset \"package_create\" \"package_update\" \"package_patch\" \"package_delete\" \"package_search\" resource \"resource_create\" \"resource_update\" \"resource_patch\" \"resource_delete\" \"resource_search\" package works production UAT instances RIDL. use UAT version, run Sys.setenv(USE_UAT=1) calling functions package. go back production instance, call Sys.unsetenv(\"USE_UAT\").","code":""},{"path":"/reference/ridl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"apihelper — ridl","text":"","code":"# ridl(action =\"package_search\", as.list(\"cbi\"))"},{"path":"/reference/search.html","id":null,"dir":"Reference","previous_headings":"","what":"Searches for datasets and resources satisfying a given criteria. — search","title":"Searches for datasets and resources satisfying a given criteria. — search","text":"Searches datasets resources satisfying given criteria.","code":""},{"path":"/reference/search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Searches for datasets and resources satisfying a given criteria. — search","text":"","code":"dataset_search(q = NULL, rows = NULL, start = NULL)  resource_search(query = NULL, rows = NULL, start = NULL)"},{"path":"/reference/search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Searches for datasets and resources satisfying a given criteria. — search","text":"q, query search query. rows maximum number matching rows (datasets) return. (optional, default: 10, upper limit: 1000) start offset complete result set returned datasets begin.","code":""},{"path":"/reference/search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Searches for datasets and resources satisfying a given criteria. — search","text":"tibble search results. tibble list related resource.","code":""},{"path":"/reference/search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Searches for datasets and resources satisfying a given criteria. — search","text":"","code":"#----- # Test search in prod # Sys.unsetenv(\"USE_UAT\") # searching <- \"cbi\" # p <- dataset_search(q = searching, rows = 30) # p    #----- # Test create in UAT Sys.setenv(USE_UAT=1) # p2 <- dataset_search(q = \"testedouard2\")"},{"path":"/reference/summary_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a RIDL factsheet — summary_report","title":"Generate a RIDL factsheet — summary_report","text":"Generate RIDL factsheet","code":""},{"path":"/reference/summary_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a RIDL factsheet — summary_report","text":"","code":"summary_report(container = \"Americas\")"},{"path":"/reference/summary_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a RIDL factsheet — summary_report","text":"container list container generate factsheet generate","code":""},{"path":"/reference/summary_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a RIDL factsheet — summary_report","text":"","code":"# summary_report(year = 2022, #                                    region = \"Americas\")"},{"path":"/news/index.html","id":"riddle-005","dir":"Changelog","previous_headings":"","what":"riddle 0.0.5","title":"riddle 0.0.5","text":"Added report template quickly set data exploration data shared RIDL upload notebook PDF report directly riddle_notebook - upload back… - Create new markdown template - add parameter ridl dataset id - Et voila..","code":""},{"path":"/news/index.html","id":"riddle-004","dir":"Changelog","previous_headings":"","what":"riddle 0.0.4","title":"riddle 0.0.4","text":"Fix issues parameter parsing dataset search Clean coding style","code":""},{"path":"/news/index.html","id":"riddle-003","dir":"Changelog","previous_headings":"","what":"riddle 0.0.3","title":"riddle 0.0.3","text":"Added eval parameters search avoid API error… https://github.com/Edouard-Legoupil/riddle/issues/8","code":""},{"path":"/news/index.html","id":"riddle-002","dir":"Changelog","previous_headings":"","what":"riddle 0.0.2","title":"riddle 0.0.2","text":"Added method pull stuff within container - https://github.com/Edouard-Legoupil/riddle/issues/5","code":""},{"path":"/news/index.html","id":"riddle-001","dir":"Changelog","previous_headings":"","what":"riddle 0.0.1","title":"riddle 0.0.1","text":"Contribution Edouard: replaced authentication key authentication token - doc Added missing parameter documentation visibility resource_metadata() Fixed () non working package examples… Gave specific use case examples created specific environement variable usage using uat can swithc without re-editing renvir Fixed non-existing resource_upload function doc… far ’ve created metadata resource. next step upload data. resource_upload(r$id, path = system.file(“extdata/mtcars.csv”, package = “readr”)) Converted package dev fusen facilitate creation practical examples unit testing Replaced functions suffix package dataset functions terminology consistent used RIDL used package… package_ actually terminology used API - one used interface… strangely… Added documentation less minimal-elitist approach :) - including doc already created Ahmadou https://dickoa.gitlab.io/ridl Added UNHCR package template build pkgdown::build_site() vidonne/unhcrtemplate - _pkgdown.yml: unhcrtemplate Added Rmd report template build rapid overview dataset within one countries container - just change parameters get correct filters. Remains : Check metadata requirement correctly documented dataset resource creation Validation Error — cf https://github.com/okfn/ckanext-unhcr/blob/master/ckanext/unhcr/schemas/dataset.json#L670:L682","code":""},{"path":"/news/index.html","id":"riddle-0009000","dir":"Changelog","previous_headings":"","what":"riddle 0.0.0.9000","title":"riddle 0.0.0.9000","text":"Initial code Hisham","code":""}]
