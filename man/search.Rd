% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dataset_search.R, R/resource.R, R/search.R
\name{search}
\alias{search}
\alias{dataset_search}
\alias{resource_search}
\alias{resource}
\title{Searches for datasets and resources satisfying a given criteria.}
\usage{
dataset_search(q = NULL, rows = NULL, start = NULL)

resource_search(query = NULL, rows = NULL, start = NULL)

resource_search(query = NULL, rows = NULL, start = NULL)
}
\arguments{
\item{q, query}{The search query.}

\item{rows}{The maximum number of matching rows (datasets) to return.
(optional, default: 10, upper limit: 1000)}

\item{start}{The offset in the complete result for where the set of returned
datasets should begin.}

\item{res_metadata}{Metadata created by \code{\link{resource_metadata()}}.}

\item{id}{The id or name of the resource.}

\item{pkgid}{The id or name of the dataset to which this resource belongs to.}
}
\value{
A tibble with the search results.

The resource.
}
\description{
Work with RIDL resources (files)
}
\details{
You must have the necessary permissions to create, edit, or delete
datasets and their resources.

Note that several fields are required for \code{resource_create()} and
\code{resource_update()} operations to succeed.
Consult \code{\link{resource_metadata()}} for the details.

For \code{resource_update()}/\code{resource_patch()} operations, it is recommended to
call \code{resource_show()}, make the desired changes to the result, and then
call \code{resource_update()}/\code{resource_patch()} with it.

The difference between the update and patch methods is that the patch will
perform an update of the provided parameters, while leaving all other
parameters unchanged, whereas the update methods deletes all parameters
not explicitly provided in the \code{metadata}.
}
\examples{
#-----
# Test search in prod
Sys.unsetenv("USE_UAT")
p <- riddle::dataset_search(q = "cbi")
p
p$id
## let's get again the details of the dataset we want to add the resource in..

Sys.unsetenv("USE_UAT")
p <- riddle::dataset_search("rms_v4")

Sys.setenv(USE_UAT=1)
p <- riddle::dataset_search("tests")

ridlid <- as.character(p[1, c("id")])

m <- riddle::resource_metadata(type = "data",
                       url = "mtcars.csv",
                       name = "mtcarsriddle",
                       format = "csv",
                       file_type = "microdata",
                       date_range_start = "1973-01-01",
                       date_range_end = "1973-12-31",
                       version = "1",
                       visibility = "public",
                       process_status = "raw",
                       identifiability = "anonymized_public",
upload = httr::upload_file(system.file("extdata/mtcars.csv", package = "readr")))

## let's get again the details of the dataset we want to add the resource in..
#r <- riddle::resource_create(ridlid, res_metadata = m)
# Like before, the return value is a tibble representation of the resource.
#r
 
## and now can search for it - checking it is correctly there... 
##riddle::resource_search("name:mtcarsriddle")

# And once we’re done experimenting with the API, we should take down our
# toy dataset since we don’t really need it on RIDL.
#riddle::dataset_delete(p$id)

}
