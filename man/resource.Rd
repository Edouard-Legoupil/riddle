% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/resource.R, R/search.R
\name{resource}
\alias{resource}
\alias{resource_create}
\alias{resource_update}
\alias{resource_patch}
\alias{resource_delete}
\title{Work with RIDL resources (files)}
\usage{
resource_create(pkgid, res_metadata)

resource_update(id, res_metadata)

resource_patch(id, res_metadata)

resource_delete(id)

resource_create(pkgid, res_metadata)

resource_update(id, res_metadata)

resource_patch(id, res_metadata)

resource_delete(id)
}
\arguments{
\item{res_metadata}{Metadata created by \code{\link{resource_metadata()}}.}

\item{id}{The id or name of the resource.}

\item{dataset_id}{The id or name of the dataset to which this resource belongs to.}
}
\value{
metadata resource.

updated metadata resource.
}
\description{
Work with RIDL resources (files)
}
\details{
You must have the necessary permissions to create, edit, or delete
datasets and their resources.

Note that several fields are required for \code{resource_create()} and
\code{resource_update()} operations to succeed.
Consult \code{\link{resource_metadata()}} for the details.

For \code{resource_update()}/\code{resource_patch()} operations, it is recommended to
call \code{resource_show()}, make the desired changes to the result, and then
call \code{resource_update()}/\code{resource_patch()} with it.

The difference between the update and patch methods is that the patch will
perform an update of the provided parameters, while leaving all other
parameters unchanged, whereas the update methods deletes all parameters
not explicitly provided in the \code{metadata}.
}
\examples{
## let's get again the details of the dataset we want to add the resource in..
#-----
# Test search in prod
Sys.unsetenv("USE_UAT")
# p <- riddle::dataset_search("rms_v4")
# p

#-----
# Test search in uat
Sys.setenv(USE_UAT=1)
# p <- riddle::dataset_search("tests")
# p
# ##take the first one
# ridlid <- as.character(p[9, c("id")])




#-----
# Test search in prod
Sys.unsetenv("USE_UAT")
# p <- riddle::dataset_show('rms_v4')
# dataset_id_rms <- p$id
# list_of_ressources <- p[["resources"]][[1]]
# knitr::kable(list_of_ressources)

new_attachment <- riddle::resource_metadata(type = "attachment",
                       url = "resource.R", 
# upload = httr::upload_file(here::here("R","resource.R") ),
## # Error:
# ! All columns in a tibble must be vectors.
# ✖ Column `upload` is a `form_file` object.
                       name = "Rscript",
                       format = "R",
                       file_type = "report",
                       version = "1",
                       visibility = "public" )

## Now testing adding the file "resource.R" as an attachment in the 
## dataset 'rms_v4'

# but not working.... 
# resource_create(dataset_id = dataset_id_rms, 
#                         res_metadata = new_attachment )
# Error in ridl(action = "resource_create", dataset_id = dataset_id, !!!res_metadata, : 
# __type: Not Found Error
# message: Not found: No dataset id provided, cannot check auth.

m <- riddle::resource_metadata(type = "data",
                       url = "mtcars.csv",
  upload = httr::upload_file(system.file("extdata/mtcars.csv", package = "readr")),         

                       name = "mtcars.csv",
                       format = "csv",
                       file_type = "microdata",
                       date_range_start = "1973-01-01",
                       date_range_end = "1973-12-31",
                       version = "1",
                       visibility = "public",
                       process_status = "raw",
                       identifiability = "anonymized_public")
# same pb... 
# resource_create(dataset_id = dataset_id_rms, 
#                          res_metadata = m )
# Error in ridl(action = "resource_create", dataset_id = dataset_id, !!!res_metadata, : 
# __type: Not Found Error
# message: Not found: No dataset id provided, cannot check auth.

## let's get again the details of the dataset we want to add the resource in..
#r <- riddle::resource_create(dataset_id = ridlid, res_metadata = m)
# Like before, the return value is a tibble representation of the resource.
#r
 
## and now can search for it - checking it is correctly there... 
##riddle::resource_search("name:mtcarsriddle")

# And once we’re done experimenting with the API, we should take down our
# toy dataset since we don’t really need it on RIDL.
#riddle::dataset_delete(p$id)
# riddle::resource_delete()

}
